{
	"info": {
		"_postman_id": "18730555-4586-4f49-8132-9d19106c92af",
		"name": "ToDoListAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12461802"
	},
	"item": [
		{
			"name": "SmokeTests",
			"item": [
				{
					"name": "tasks",
					"item": [
						{
							"name": "GetTaskList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var firstTask = {\r",
											"    \"id\": 1,\r",
											"    \"title\": \"The FIRST task\",\r",
											"    \"body\": \"This is my first task\",\r",
											"    \"status\": \"New\",\r",
											"    \"ownerId\": 9\r",
											"}\r",
											"pm.test(\"Check first task Data\", function () {    \r",
											"    //assume that the first task won't change\r",
											"    pm.expect(jsonData[0]).to.eql(firstTask);\r",
											"});\r",
											"\r",
											"pm.test(\"Check that each task has required fields\", function () {\r",
											"    var x;\r",
											"    for (x in jsonData) {\r",
											"        utils.check_task_keys(jsonData[x]);\r",
											"    } \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetSingleTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check that the blogpost has required fields\", function () {\r",
											"        utils.check_blogpost_keys(jsonData);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}blogposts/{{blogpost_id}}",
									"host": [
										"{{base_url}}blogposts"
									],
									"path": [
										"{{blogpost_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostAndDeleteTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Check that the task has required fields\", function () {\r",
											"        utils.check_task_keys(jsonData);\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var post_id = jsonData.id;\r",
											"var base_url = pm.environment.get(\"base_url\")\r",
											"\r",
											"pm.sendRequest({url:`${base_url}/tasks/${post_id}`,method: 'DELETE'}, function (err, response) {\r",
											"    pm.test(\"Delete Response is OK\", function () {\r",
											"        pm.expect(response.status).to.eql('OK');\r",
											"    });\r",
											"    pm.test(\"Delete Response body is empty\", function () {\r",
											"        pm.expect(response.json()).to.eql({});\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"The FIRST task\",\r\n    \"body\": \"This is my first task\",\r\n    \"status\": \"New\",\r\n    \"ownerId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tasks/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"pm.test(\"Check that each task has required fields\", function () {\r",
											"        utils.check_task_keys(jsonData);\r",
											"});\r",
											"\r",
											"//reset the post back to it's original state\r",
											"var base_url = pm.environment.get(\"base_url\");\r",
											"var task_id = pm.environment.get(\"task_id\");\r",
											"var original_response = pm.environment.get(\"original_get_response\")\r",
											"pm.sendRequest({url:`${base_url}/tasks/${task_id}`,\r",
											"    method: 'PUT',\r",
											"    header:{'Content-Type': 'application/json'},\r",
											"    body:{mode: 'raw', raw: original_response}}, \r",
											"    function (err, response) {\r",
											"        console.log(response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//get original value\r",
											"var base_url = pm.environment.get(\"base_url\");\r",
											"var task_id = pm.environment.get(\"task_id\");\r",
											"\r",
											"pm.sendRequest({url:`${base_url}/tasks/${task_id}`,method: 'GET'}, function (err, response)\r",
											"{\r",
											"    pm.environment.set(\"original_get_response\",response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Modified BlogPost\",\r\n    \"body\": \"This is my first blog post - and it has been modified\",\r\n    \"status\": \"New\",\r\n    \"ownerId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tasks/{{task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks",
										"{{task_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTasktWithEmbeddedComments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//get original value\r",
											"var base_url = pm.environment.get(\"base_url\");\r",
											"var task_id = pm.environment.get(\"task_id\");\r",
											"\r",
											"pm.sendRequest({url:`${base_url}/tasks/${task_id}`,method: 'GET'}, function (err, response) {\r",
											"    pm.environment.set(\"original_get_response\",response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expected_response = {\r",
											"    \"id\": 1,\r",
											"    \"title\": \"The FIRST task\",\r",
											"    \"body\": \"This is my first task\",\r",
											"    \"status\": \"New\",\r",
											"    \"ownerId\": 1,\r",
											"    \"comments\": [\r",
											"        {\r",
											"            \"id\": 1,\r",
											"            \"body\": \"some comment\",\r",
											"            \"taskId\": 1,\r",
											"            \"ownerId\": 1\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test(\"Response includes correct information\", function () {\r",
											"    pm.expect(expected_response).to.eql(pm.response.json());\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tasks/1?_embed=comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks",
										"1"
									],
									"query": [
										{
											"key": "_embed",
											"value": "comments"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTaskWithExpandedOwner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expected_response = {\r",
											"    \"id\": 1,\r",
											"    \"title\": \"The FIRST task\",\r",
											"    \"body\": \"This is my first tasl\",\r",
											"    \"status\": \"New\",\r",
											"    \"ownerId\": 1,\r",
											"    \"owner\": {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"John Smith\"\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response includes correct information\", function () {\r",
											"    pm.expect(expected_response).to.eql(pm.response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tasks/1?_expand=owner",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks",
										"1"
									],
									"query": [
										{
											"key": "_expand",
											"value": "owner"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"utils = {check_task_keys: function (taskData) {",
									"    var taskKeys = Object.keys(taskData);",
									"    pm.expect(taskKeys).to.have.members(['body','id', 'status','ownerId','title']);",
									"}",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "comments",
					"item": [
						{
							"name": "GetCommentList",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetSingleComments",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/comments/{{comment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{comment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostAndDeleteComment",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateComment",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/comments/{{comment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"comments",
										"{{comment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCommentsWithQueryParams",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "owners",
					"item": [
						{
							"name": "GetOwnerList",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/owners",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetSingleOwners",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/owners/{{owner_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"owners",
										"{{owner_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostAndDeleteOwner",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/owners",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateOwner",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/owners/{{owner_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"owners",
										"{{owner_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOwnersWithQueryParams",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Smoke testing folder"
		},
		{
			"name": "Workflows",
			"item": [
				{
					"name": "NewCommenter",
					"item": []
				},
				{
					"name": "DuplicateAndEditTask",
					"item": []
				}
			],
			"description": "Work flow folder"
		},
		{
			"name": "Tasks",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The second blog post\",\r\n    \"body\": \"This is my second blog post. Look I modified it!\",\r\n    \"profileId\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/tasks/1?_expand=comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"tasks",
						"1"
					],
					"query": [
						{
							"key": "_expand",
							"value": "comments"
						}
					]
				}
			},
			"response": []
		}
	]
}